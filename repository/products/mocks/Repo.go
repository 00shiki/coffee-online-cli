// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entity "coffee-online-cli/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: product
func (_m *Repo) CreateProduct(product entity.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchProducts provides a mock function with given fields:
func (_m *Repo) FetchProducts() ([]entity.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FetchProducts")
	}

	var r0 []entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: id
func (_m *Repo) GetProductByID(id int) (*entity.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PopularProduct provides a mock function with given fields:
func (_m *Repo) PopularProduct() ([]entity.ProductPopular, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopularProduct")
	}

	var r0 []entity.ProductPopular
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.ProductPopular, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ProductPopular); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ProductPopular)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductStockUpdate provides a mock function with given fields: id, newStock
func (_m *Repo) ProductStockUpdate(id int, newStock int) error {
	ret := _m.Called(id, newStock)

	if len(ret) == 0 {
		panic("no return value specified for ProductStockUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, newStock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
